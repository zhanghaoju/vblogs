(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{577:function(t,v,_){"use strict";_.r(v);var e=_(9),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("blockquote",[_("p",[t._v("配置教程："),_("a",{attrs:{href:"https://zhanghaoju.gitee.io/vblogs/publish/tools/mac%E9%85%8D%E7%BD%AEgithub%E5%92%8Cgitlab%E8%B4%A6%E5%8F%B7.html#%E5%AE%89%E8%A3%85",target:"_blank",rel:"noopener noreferrer"}},[t._v("mac配置github和gitlab账号"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("Git单独配置："),_("a",{attrs:{href:"https://www.jianshu.com/p/7edb6b838a2e",target:"_blank",rel:"noopener noreferrer"}},[t._v("MAC上Git安装与GitHub基本使用"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("homebrew安装："),_("RouterLink",{attrs:{to:"/blogs/tools/]https://www.cnblogs.com/joyce33/p/13376752.html"}},[t._v("mac下高效安装 homebrew")])],1)]),t._v(" "),_("p",[t._v("新版Git合并了checkout和reset")]),t._v(" "),_("ul",[_("li",[t._v("原来的"),_("code",[t._v("git checkout")]),t._v(" 可以使用 "),_("code",[t._v("git restore")]),t._v(" 代替")]),t._v(" "),_("li",[t._v("原来的"),_("code",[t._v("git reset HEAD")]),t._v("可以使用 "),_("code",[t._v("git restore --staged")]),t._v("代替")]),t._v(" "),_("li",[t._v("最新版的git提示都已经更换成了 "),_("code",[t._v("restore")])])]),t._v(" "),_("h2",{attrs:{id:"关联远程仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#关联远程仓库"}},[t._v("#")]),t._v(" 关联远程仓库")]),t._v(" "),_("ol",[_("li",[t._v("初始化本地仓库：  "),_("code",[t._v("git init")])]),t._v(" "),_("li",[t._v("将文件添加跟踪列表 ： 跟踪新文件 "),_("code",[t._v("git add xxxx")])]),t._v(" "),_("li",[t._v("以精简的方式输出文件的状态 "),_("code",[t._v("git status -s")])]),t._v(" "),_("li",[t._v("将文件提交到本地仓库： "),_("code",[t._v('git commit -m "提交信息"')])]),t._v(" "),_("li",[t._v("将代码仓库与GitHub关联："),_("code",[t._v("git remote add origin github代码仓库的url地址")]),t._v("，git会自动将远程仓库的名字设置为"),_("code",[t._v("origin")]),t._v("，方便我们的后续操作")]),t._v(" "),_("li",[t._v("将代码提交到远程GitHub仓库(第一次)："),_("code",[t._v("git push -u origin master")]),t._v("，如果想将本地master分支上的内容推送到远程master分支上")]),t._v(" "),_("li",[t._v("删除远程库：使用"),_("code",[t._v("git remote rm <name>")]),t._v("命令，可以先使用"),_("code",[t._v("git remote -v")]),t._v("查看远程库信息")]),t._v(" "),_("li",[t._v("查看远程库信息："),_("code",[t._v("git remote")]),t._v(" 显示详细信息："),_("code",[t._v("git remote -v")])])]),t._v(" "),_("h2",{attrs:{id:"gitignore配置文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#gitignore配置文件"}},[t._v("#")]),t._v(" "),_("code",[t._v(".gitignore")]),t._v("配置文件")]),t._v(" "),_("p",[t._v("以 "),_("code",[t._v("#")]),t._v(" 开头的是注释，以/结尾的是目录，以 "),_("code",[t._v("/")]),t._v(" 开头防止递归，以 "),_("code",[t._v("!")]),t._v(" 开头表示取反")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("使用 glob 模式进行文件和文件夹的匹配")])]),t._v(" "),_("li",[_("p",[t._v("星号 "),_("code",[t._v("*")]),t._v(" 匹配零个或多个任意字符")])]),t._v(" "),_("li",[_("p",[t._v("[abc] 匹配任何一个列在方括号中的字符")])]),t._v(" "),_("li",[_("p",[t._v("问号 "),_("code",[t._v("?")]),t._v(" 只匹配一个任意字符")])]),t._v(" "),_("li",[_("p",[t._v("在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配 [0-9]")])]),t._v(" "),_("li",[_("p",[t._v("两个星号 "),_("code",[t._v("**")]),t._v(" 表示匹配任意中间目录("),_("code",[t._v("a/**/z")]),t._v(" 可以匹配a/z目录、"),_("code",[t._v("a/b/z")]),t._v(" 或 "),_("code",[t._v("a/b/c/z")]),t._v(" 等目录)")])])]),t._v(" "),_("h2",{attrs:{id:"版本库管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本库管理"}},[t._v("#")]),t._v(" 版本库管理")]),t._v(" "),_("h3",{attrs:{id:"查看文件状态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查看文件状态"}},[t._v("#")]),t._v(" 查看文件状态")]),t._v(" "),_("p",[_("code",[t._v("git diff")]),t._v(" : 查看我们修改了什么内容")]),t._v(" "),_("p",[_("code",[t._v("git status")]),t._v(":  查看文件状态")]),t._v(" "),_("h3",{attrs:{id:"版本回退"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),_("p",[_("code",[t._v("git log")]),t._v(" ：显示从最近到最远的提交日志")]),t._v(" "),_("p",[_("code",[t._v("git log --pretty=oneline")]),t._v("：在一行上展示所有提交历史")]),t._v(" "),_("p",[_("code",[t._v("git reset --hard <CommitID>")]),t._v("：使用命令，根据指定的提交ID回退到指定版本")]),t._v(" "),_("p",[_("code",[t._v("git reflog --pretty=online")]),t._v("： 在旧版本中使用 "),_("code",[t._v("git reflog --pretty=online")]),t._v("命令，查看命令操作的历史")]),t._v(" "),_("p",[_("code",[t._v("git reset --hard <CommitID>")]),t._v("：再次根据最新的提交ID，跳转到最新的版本")]),t._v(" "),_("p",[_("code",[t._v("git reset --hard HEAD^")]),t._v("：在Git中HEAD就是表示当前版本，上一个版本就是HEAD^ 上上个版本是HEAD^^  上10个版本可以标识 HEAD ~ 10")]),t._v(" "),_("p",[_("code",[t._v("git reflog")]),t._v("：记录每一次执行的命令")]),t._v(" "),_("h3",{attrs:{id:"撤销修改"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),_("p",[_("code",[t._v("git diff HEAD -- readme.txt")]),t._v(" 查看工作区和版本库里面最新版本的区别")]),t._v(" "),_("p",[_("code",[t._v("git checkout –- file")]),t._v(" ：丢弃工作区的修改，有两种情况")]),t._v(" "),_("p",[t._v("一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；")]),t._v(" "),_("p",[t._v("一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。")]),t._v(" "),_("p",[t._v("总之，就是让这个文件回到最近一次git commit或git add时的状态。")]),t._v(" "),_("p",[_("code",[t._v("git reset HEAD file")]),t._v(" : 将已经add存在暂存区的数据回退到add之前")]),t._v(" "),_("p",[_("code",[t._v("git reset --soft HEAD^")]),t._v("：将已经commit之后的数据回退到add之后")]),t._v(" "),_("p",[t._v("git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”")]),t._v(" "),_("h3",{attrs:{id:"删除文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#删除文件"}},[t._v("#")]),t._v(" 删除文件")]),t._v(" "),_("p",[_("code",[t._v("rm file")]),t._v("： 删除本地文件信息")]),t._v(" "),_("p",[_("code",[t._v("git rm file")]),t._v("： 从提交的版本库删除文件")]),t._v(" "),_("p",[_("code",[t._v("git checkout -- file")]),t._v("： 误删时从版本库中恢复到最新版本")]),t._v(" "),_("h3",{attrs:{id:"取消合并"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#取消合并"}},[t._v("#")]),t._v(" 取消合并")]),t._v(" "),_("p",[_("code",[t._v("git merge --abort")]),t._v("  取消合并")]),t._v(" "),_("h2",{attrs:{id:"分支操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),_("h3",{attrs:{id:"更新本地分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#更新本地分支"}},[t._v("#")]),t._v(" 更新本地分支")]),t._v(" "),_("p",[t._v("查看远程分支\n"),_("code",[t._v("git branch -a")])]),t._v(" "),_("p",[t._v("更新分支\n"),_("code",[t._v("git remote update origin --prune")])]),t._v(" "),_("p",[t._v("切换分支\n"),_("code",[t._v("git checkout test")])]),t._v(" "),_("p",[t._v("如果这样的方式没起作用的话可以使用下面这种方法 在本地创建一个和远程分支同样名字的分支 并切换到这个分支\n"),_("code",[t._v("git checkout -b test origin/test")])]),t._v(" "),_("p",[t._v("然后更新下这个分支的代码 ok了\n"),_("code",[t._v("git pull origin test")])]),t._v(" "),_("h3",{attrs:{id:"分支命令系分"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支命令系分"}},[t._v("#")]),t._v(" 分支命令系分")]),t._v(" "),_("p",[_("code",[t._v("git branch")]),t._v(" ：查看所有分支列表")]),t._v(" "),_("p",[_("code",[t._v("git remote show 远程仓库名称")]),t._v(" ：查看远程仓库中的所有分支列表")]),t._v(" "),_("p",[_("code",[t._v("git branch 分支名称")]),t._v(" ：创建新分支")]),t._v(" "),_("p",[_("code",[t._v("git checkout 分支名称")]),t._v("： 切换分支")]),t._v(" "),_("p",[_("code",[t._v("git checkout -b 分支名称")]),t._v(" ：分支的快速创建和切换")]),t._v(" "),_("p",[t._v("-b 表示创建一个新分支 checkout 表示切换到刚才新建的分支上")]),t._v(" "),_("p",[_("code",[t._v("git merge 分支")]),t._v(" ：合并分支")]),t._v(" "),_("p",[t._v("例如： "),_("code",[t._v("git merge login")]),t._v("首先切换到主分支上，在master分支上运行git merge命令，将login子分支的代码合并到master分支上")]),t._v(" "),_("p",[_("code",[t._v("git branch -d 分支名称")]),t._v("：删除分支")]),t._v(" "),_("p",[_("code",[t._v("git branch -D 分支名称")]),t._v("：强制删除本地分支")]),t._v(" "),_("p",[_("code",[t._v("git push 远程仓库名称 --delete 远程分支名称")]),t._v(" ：删除远程仓库中的分支")]),t._v(" "),_("p",[_("code",[t._v("git push -u origin payment:pay")]),t._v("： 本地分支推送到远程分支并重命名（本地分支）")]),t._v(" "),_("p",[_("code",[t._v("git checkout -b 要修改的本地分支名称")]),t._v("：下载远程仓库到本地并重新命名分支")]),t._v(" "),_("p",[t._v("注意：新版本提供了"),_("code",[t._v("switch")]),t._v("来进行切换分支的操作")]),t._v(" "),_("p",[_("code",[t._v("git switch -c 分支名称")]),t._v(" ：分支的快速创建和切换")]),t._v(" "),_("h2",{attrs:{id:"bug修复"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bug修复"}},[t._v("#")]),t._v(" bug修复")]),t._v(" "),_("ul",[_("li",[t._v("开发分支暂存工作现场 stash")]),t._v(" "),_("li",[t._v("切换主分支，新增一个临时修复分支")]),t._v(" "),_("li",[t._v("修复完成后，提交代码，删除临时分支")]),t._v(" "),_("li",[t._v("开发分支恢复工作现场，并将修复的问题同步到开发分支上，使用"),_("code",[t._v("cherry-pick")]),t._v("命令，复制一个特定的提交到当前分支")])]),t._v(" "),_("p",[t._v("可以参考："),_("a",{attrs:{href:"https://segmentfault.com/a/1190000017205604",target:"_blank",rel:"noopener noreferrer"}},[t._v("git commit 代码提交规范"),_("OutboundLink")],1)]),t._v(" "),_("h2",{attrs:{id:"git-revert-的用法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-revert-的用法"}},[t._v("#")]),t._v(" "),_("code",[t._v("git revert")]),t._v(" 的用法")]),t._v(" "),_("p",[_("code",[t._v("git revert")]),t._v(" 的作用是通过创建一个新的版本，这个版本的内容与我们要回退到的目标版本一样，但是"),_("code",[t._v("HEAD")]),t._v("指针是指向这个新生成的版本，而不是目标版本。\n如果我们想恢复之前的某一版本（该版本不是"),_("code",[t._v("merge")]),t._v("类型），但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。\n我们使用"),_("code",[t._v("git revert HEAD")]),t._v("命令就可以创建一个新的版本，此版本与上一个版本相同。\n此时"),_("code",[t._v("cat abc.md")]),t._v("就可以发现输出回到了'hello world'。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://vuepres-images.oss-cn-shanghai.aliyuncs.com/vue-blog/git.png",alt:"img"}})]),t._v(" "),_("p",[t._v("以下是 "),_("code",[t._v("git revert")]),t._v(" 的三种用法")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git revert HEAD")]),t._v(" ：撤销前一次 commit")]),t._v(" "),_("li",[_("code",[t._v("git revert HEAD^")]),t._v(" ：撤销前前一次 commit")]),t._v(" "),_("li",[_("code",[t._v("git revert commit + (commit id)")]),t._v("： 撤销指定的版本，撤销也会作为一次提交进行保存。")])]),t._v(" "),_("h2",{attrs:{id:"rebase操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rebase操作"}},[t._v("#")]),t._v(" rebase操作")]),t._v(" "),_("p",[t._v('作用：把分叉的提交历史"整理"成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了')]),t._v(" "),_("p",[t._v("目的：使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比")]),t._v(" "),_("p",[t._v("输入"),_("code",[t._v("git rebase")]),t._v("在输入"),_("code",[t._v("git log")])]),t._v(" "),_("h2",{attrs:{id:"标签操作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标签操作"}},[t._v("#")]),t._v(" 标签操作")]),t._v(" "),_("p",[_("code",[t._v("git tag v1.0")]),t._v("：打标签")]),t._v(" "),_("p",[_("code",[t._v("git tag")]),t._v("：查看标签")]),t._v(" "),_("div",{staticClass:"language-yaml line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-yaml"}},[_("code",[t._v("git log "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("pretty=oneline "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("abbrev"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("commit`：查找历史提交的commit id 然后打标签：`git tag v0.9 commitId\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("标签不是按时间顺序列出而是按照字母排序的，可以使用"),_("code",[t._v("git show <tagname>")]),t._v("查看标签信息")]),t._v(" "),_("p",[_("code",[t._v('git tag -a v0.1 -m "version 0.1 released" 1094adb')]),t._v("：创建带有说明的标签")]),t._v(" "),_("p",[_("code",[t._v("git tag -d v0.1")]),t._v("：删除标签")]),t._v(" "),_("p",[_("code",[t._v("git push origin <tagname>")]),t._v("：推送某个标签到远程")]),t._v(" "),_("p",[_("code",[t._v("git push origin --tags")]),t._v("：一次性推送全部尚未推送到远程的本地标签")]),t._v(" "),_("p",[t._v("删除远程标签：")]),t._v(" "),_("ul",[_("li",[t._v("首先先从本地删除："),_("code",[t._v("git tag -d <tagname>")])]),t._v(" "),_("li",[t._v("从远程删除："),_("code",[t._v("git push origin :<tagname>")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);